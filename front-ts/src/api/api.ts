// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Spring Boot REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiErrorResponse
 */
export interface ApiErrorResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiErrorResponse
     */
    errors: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiErrorResponse
     */
    message: string;
}

/**
 * 
 * @export
 * @interface AuthTokenResponse
 */
export interface AuthTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthTokenResponse
     */
    accessToken: string;
}

/**
 * 
 * @export
 * @interface GrantedAuthority
 */
export interface GrantedAuthority {
    /**
     * 
     * @type {string}
     * @memberof GrantedAuthority
     */
    authority?: string;
}

/**
 * 
 * @export
 * @interface MessageTO
 */
export interface MessageTO {
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    roomId: string;
    /**
     * 
     * @type {Date}
     * @memberof MessageTO
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    userId: string;
}

/**
 * 
 * @export
 * @interface NewMessageTO
 */
export interface NewMessageTO {
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    roomId: string;
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    userId: string;
}

/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    username: string;
}

/**
 * 
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    username: string;
}

/**
 * 
 * @export
 * @interface UserDetails
 */
export interface UserDetails {
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    accountNonLocked?: boolean;
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof UserDetails
     */
    authorities?: Array<GrantedAuthority>;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    credentialsNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    username?: string;
}


/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/auth/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signin
         * @param {SignInRequest} signInRequest signInRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUsingPOST(signInRequest: SignInRequest, options: any = {}): RequestArgs {
            // verify required parameter 'signInRequest' is not null or undefined
            if (signInRequest === null || signInRequest === undefined) {
                throw new RequiredError('signInRequest','Required parameter signInRequest was null or undefined when calling signinUsingPOST.');
            }
            const localVarPath = `/api/auth/signin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"SignInRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signInRequest !== undefined ? signInRequest : {}) : (signInRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signup
         * @param {SignUpRequest} signUpRequest signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST(signUpRequest: SignUpRequest, options: any = {}): RequestArgs {
            // verify required parameter 'signUpRequest' is not null or undefined
            if (signUpRequest === null || signUpRequest === undefined) {
                throw new RequiredError('signUpRequest','Required parameter signUpRequest was null or undefined when calling signupUsingPOST.');
            }
            const localVarPath = `/api/auth/signup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"SignUpRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signUpRequest !== undefined ? signUpRequest : {}) : (signUpRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails> {
            const localVarAxiosArgs = AuthControllerApiAxiosParamCreator(configuration).meUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary signin
         * @param {SignInRequest} signInRequest signInRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUsingPOST(signInRequest: SignInRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponse> {
            const localVarAxiosArgs = AuthControllerApiAxiosParamCreator(configuration).signinUsingPOST(signInRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary signup
         * @param {SignUpRequest} signUpRequest signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST(signUpRequest: SignUpRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponse> {
            const localVarAxiosArgs = AuthControllerApiAxiosParamCreator(configuration).signupUsingPOST(signUpRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUsingGET(options?: any) {
            return AuthControllerApiFp(configuration).meUsingGET(options)(axios, basePath);
        },
        /**
         * 
         * @summary signin
         * @param {SignInRequest} signInRequest signInRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUsingPOST(signInRequest: SignInRequest, options?: any) {
            return AuthControllerApiFp(configuration).signinUsingPOST(signInRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary signup
         * @param {SignUpRequest} signUpRequest signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST(signUpRequest: SignUpRequest, options?: any) {
            return AuthControllerApiFp(configuration).signupUsingPOST(signUpRequest, options)(axios, basePath);
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public meUsingGET(options?: any) {
        return AuthControllerApiFp(this.configuration).meUsingGET(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary signin
     * @param {SignInRequest} signInRequest signInRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signinUsingPOST(signInRequest: SignInRequest, options?: any) {
        return AuthControllerApiFp(this.configuration).signinUsingPOST(signInRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary signup
     * @param {SignUpRequest} signUpRequest signUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signupUsingPOST(signUpRequest: SignUpRequest, options?: any) {
        return AuthControllerApiFp(this.configuration).signupUsingPOST(signUpRequest, options)(this.axios, this.basePath);
    }

}


/**
 * MessageControllerApi - axios parameter creator
 * @export
 */
export const MessageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getMessagesByRoomId
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesByRoomIdUsingGET(roomId: string, options: any = {}): RequestArgs {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling getMessagesByRoomIdUsingGET.');
            }
            const localVarPath = `/api/message`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['roomId'] = roomId;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary postMessage
         * @param {NewMessageTO} newMessageTO newMessageTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageUsingPOST(newMessageTO: NewMessageTO, options: any = {}): RequestArgs {
            // verify required parameter 'newMessageTO' is not null or undefined
            if (newMessageTO === null || newMessageTO === undefined) {
                throw new RequiredError('newMessageTO','Required parameter newMessageTO was null or undefined when calling postMessageUsingPOST.');
            }
            const localVarPath = `/api/message`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"NewMessageTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newMessageTO !== undefined ? newMessageTO : {}) : (newMessageTO || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageControllerApi - functional programming interface
 * @export
 */
export const MessageControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getMessagesByRoomId
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesByRoomIdUsingGET(roomId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageTO>> {
            const localVarAxiosArgs = MessageControllerApiAxiosParamCreator(configuration).getMessagesByRoomIdUsingGET(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary postMessage
         * @param {NewMessageTO} newMessageTO newMessageTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageUsingPOST(newMessageTO: NewMessageTO, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTO> {
            const localVarAxiosArgs = MessageControllerApiAxiosParamCreator(configuration).postMessageUsingPOST(newMessageTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MessageControllerApi - factory interface
 * @export
 */
export const MessageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getMessagesByRoomId
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesByRoomIdUsingGET(roomId: string, options?: any) {
            return MessageControllerApiFp(configuration).getMessagesByRoomIdUsingGET(roomId, options)(axios, basePath);
        },
        /**
         * 
         * @summary postMessage
         * @param {NewMessageTO} newMessageTO newMessageTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageUsingPOST(newMessageTO: NewMessageTO, options?: any) {
            return MessageControllerApiFp(configuration).postMessageUsingPOST(newMessageTO, options)(axios, basePath);
        },
    };
};

/**
 * MessageControllerApi - object-oriented interface
 * @export
 * @class MessageControllerApi
 * @extends {BaseAPI}
 */
export class MessageControllerApi extends BaseAPI {
    /**
     * 
     * @summary getMessagesByRoomId
     * @param {string} roomId roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getMessagesByRoomIdUsingGET(roomId: string, options?: any) {
        return MessageControllerApiFp(this.configuration).getMessagesByRoomIdUsingGET(roomId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary postMessage
     * @param {NewMessageTO} newMessageTO newMessageTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public postMessageUsingPOST(newMessageTO: NewMessageTO, options?: any) {
        return MessageControllerApiFp(this.configuration).postMessageUsingPOST(newMessageTO, options)(this.axios, this.basePath);
    }

}


