// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Spring Boot REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiErrorResponse
 */
export interface ApiErrorResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiErrorResponse
     */
    errors: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiErrorResponse
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof ApiErrorResponse
     */
    status: ApiErrorResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ApiErrorResponseStatusEnum {
    _100CONTINUE = '100 CONTINUE',
    _101SWITCHINGPROTOCOLS = '101 SWITCHING_PROTOCOLS',
    _102PROCESSING = '102 PROCESSING',
    _103CHECKPOINT = '103 CHECKPOINT',
    _200OK = '200 OK',
    _201CREATED = '201 CREATED',
    _202ACCEPTED = '202 ACCEPTED',
    _203NONAUTHORITATIVEINFORMATION = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NOCONTENT = '204 NO_CONTENT',
    _205RESETCONTENT = '205 RESET_CONTENT',
    _206PARTIALCONTENT = '206 PARTIAL_CONTENT',
    _207MULTISTATUS = '207 MULTI_STATUS',
    _208ALREADYREPORTED = '208 ALREADY_REPORTED',
    _226IMUSED = '226 IM_USED',
    _300MULTIPLECHOICES = '300 MULTIPLE_CHOICES',
    _301MOVEDPERMANENTLY = '301 MOVED_PERMANENTLY',
    _302FOUND = '302 FOUND',
    _302MOVEDTEMPORARILY = '302 MOVED_TEMPORARILY',
    _303SEEOTHER = '303 SEE_OTHER',
    _304NOTMODIFIED = '304 NOT_MODIFIED',
    _305USEPROXY = '305 USE_PROXY',
    _307TEMPORARYREDIRECT = '307 TEMPORARY_REDIRECT',
    _308PERMANENTREDIRECT = '308 PERMANENT_REDIRECT',
    _400BADREQUEST = '400 BAD_REQUEST',
    _401UNAUTHORIZED = '401 UNAUTHORIZED',
    _402PAYMENTREQUIRED = '402 PAYMENT_REQUIRED',
    _403FORBIDDEN = '403 FORBIDDEN',
    _404NOTFOUND = '404 NOT_FOUND',
    _405METHODNOTALLOWED = '405 METHOD_NOT_ALLOWED',
    _406NOTACCEPTABLE = '406 NOT_ACCEPTABLE',
    _407PROXYAUTHENTICATIONREQUIRED = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408REQUESTTIMEOUT = '408 REQUEST_TIMEOUT',
    _409CONFLICT = '409 CONFLICT',
    _410GONE = '410 GONE',
    _411LENGTHREQUIRED = '411 LENGTH_REQUIRED',
    _412PRECONDITIONFAILED = '412 PRECONDITION_FAILED',
    _413PAYLOADTOOLARGE = '413 PAYLOAD_TOO_LARGE',
    _413REQUESTENTITYTOOLARGE = '413 REQUEST_ENTITY_TOO_LARGE',
    _414URITOOLONG = '414 URI_TOO_LONG',
    _414REQUESTURITOOLONG = '414 REQUEST_URI_TOO_LONG',
    _415UNSUPPORTEDMEDIATYPE = '415 UNSUPPORTED_MEDIA_TYPE',
    _416REQUESTEDRANGENOTSATISFIABLE = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417EXPECTATIONFAILED = '417 EXPECTATION_FAILED',
    _418IAMATEAPOT = '418 I_AM_A_TEAPOT',
    _419INSUFFICIENTSPACEONRESOURCE = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420METHODFAILURE = '420 METHOD_FAILURE',
    _421DESTINATIONLOCKED = '421 DESTINATION_LOCKED',
    _422UNPROCESSABLEENTITY = '422 UNPROCESSABLE_ENTITY',
    _423LOCKED = '423 LOCKED',
    _424FAILEDDEPENDENCY = '424 FAILED_DEPENDENCY',
    _426UPGRADEREQUIRED = '426 UPGRADE_REQUIRED',
    _428PRECONDITIONREQUIRED = '428 PRECONDITION_REQUIRED',
    _429TOOMANYREQUESTS = '429 TOO_MANY_REQUESTS',
    _431REQUESTHEADERFIELDSTOOLARGE = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UNAVAILABLEFORLEGALREASONS = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500INTERNALSERVERERROR = '500 INTERNAL_SERVER_ERROR',
    _501NOTIMPLEMENTED = '501 NOT_IMPLEMENTED',
    _502BADGATEWAY = '502 BAD_GATEWAY',
    _503SERVICEUNAVAILABLE = '503 SERVICE_UNAVAILABLE',
    _504GATEWAYTIMEOUT = '504 GATEWAY_TIMEOUT',
    _505HTTPVERSIONNOTSUPPORTED = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VARIANTALSONEGOTIATES = '506 VARIANT_ALSO_NEGOTIATES',
    _507INSUFFICIENTSTORAGE = '507 INSUFFICIENT_STORAGE',
    _508LOOPDETECTED = '508 LOOP_DETECTED',
    _509BANDWIDTHLIMITEXCEEDED = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NOTEXTENDED = '510 NOT_EXTENDED',
    _511NETWORKAUTHENTICATIONREQUIRED = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 * 
 * @export
 * @interface AuthTokenResponse
 */
export interface AuthTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthTokenResponse
     */
    accessToken: string;
}
/**
 * 
 * @export
 * @interface GrantedAuthority
 */
export interface GrantedAuthority {
    /**
     * 
     * @type {string}
     * @memberof GrantedAuthority
     */
    authority: string;
}
/**
 * 
 * @export
 * @interface MessageTO
 */
export interface MessageTO {
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    roomId: string;
    /**
     * 
     * @type {Date}
     * @memberof MessageTO
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof MessageTO
     */
    userId: string;
}
/**
 * 
 * @export
 * @interface NewMessageTO
 */
export interface NewMessageTO {
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    roomId: string;
    /**
     * 
     * @type {string}
     * @memberof NewMessageTO
     */
    userId: string;
}
/**
 * 
 * @export
 * @interface NewRoomTO
 */
export interface NewRoomTO {
    /**
     * 
     * @type {string}
     * @memberof NewRoomTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof NewRoomTO
     */
    ownerId: string;
    /**
     * 
     * @type {string}
     * @memberof NewRoomTO
     */
    title: string;
}
/**
 * 
 * @export
 * @interface RoomTO
 */
export interface RoomTO {
    /**
     * 
     * @type {string}
     * @memberof RoomTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RoomTO
     */
    ownerId: string;
    /**
     * 
     * @type {string}
     * @memberof RoomTO
     */
    title: string;
}
/**
 * 
 * @export
 * @interface SignInRequest
 */
export interface SignInRequest {
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof SignInRequest
     */
    username: string;
}
/**
 * 
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequest
     */
    username: string;
}
/**
 * 
 * @export
 * @interface UserDetails
 */
export interface UserDetails {
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    accountNonExpired: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    accountNonLocked: boolean;
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof UserDetails
     */
    authorities: Array<GrantedAuthority>;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    credentialsNonExpired: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetails
     */
    enabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDetails
     */
    rooms: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserDetails
     */
    username: string;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/api/auth/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signin
         * @param {SignInRequest} signInRequest signInRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUsingPOST(signInRequest: SignInRequest, options: any = {}): RequestArgs {
            // verify required parameter 'signInRequest' is not null or undefined
            if (signInRequest === null || signInRequest === undefined) {
                throw new RequiredError('signInRequest','Required parameter signInRequest was null or undefined when calling signinUsingPOST.');
            }
            const localVarPath = `/api/auth/signin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"SignInRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signInRequest !== undefined ? signInRequest : {}) : (signInRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signup
         * @param {SignUpRequest} signUpRequest signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST(signUpRequest: SignUpRequest, options: any = {}): RequestArgs {
            // verify required parameter 'signUpRequest' is not null or undefined
            if (signUpRequest === null || signUpRequest === undefined) {
                throw new RequiredError('signUpRequest','Required parameter signUpRequest was null or undefined when calling signupUsingPOST.');
            }
            const localVarPath = `/api/auth/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"SignUpRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signUpRequest !== undefined ? signUpRequest : {}) : (signUpRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails> {
            const localVarAxiosArgs = AuthControllerApiAxiosParamCreator(configuration).meUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary signin
         * @param {SignInRequest} signInRequest signInRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUsingPOST(signInRequest: SignInRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponse> {
            const localVarAxiosArgs = AuthControllerApiAxiosParamCreator(configuration).signinUsingPOST(signInRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary signup
         * @param {SignUpRequest} signUpRequest signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST(signUpRequest: SignUpRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokenResponse> {
            const localVarAxiosArgs = AuthControllerApiAxiosParamCreator(configuration).signupUsingPOST(signUpRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUsingGET(options?: any) {
            return AuthControllerApiFp(configuration).meUsingGET(options)(axios, basePath);
        },
        /**
         * 
         * @summary signin
         * @param {SignInRequest} signInRequest signInRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signinUsingPOST(signInRequest: SignInRequest, options?: any) {
            return AuthControllerApiFp(configuration).signinUsingPOST(signInRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary signup
         * @param {SignUpRequest} signUpRequest signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST(signUpRequest: SignUpRequest, options?: any) {
            return AuthControllerApiFp(configuration).signupUsingPOST(signUpRequest, options)(axios, basePath);
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public meUsingGET(options?: any) {
        return AuthControllerApiFp(this.configuration).meUsingGET(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary signin
     * @param {SignInRequest} signInRequest signInRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signinUsingPOST(signInRequest: SignInRequest, options?: any) {
        return AuthControllerApiFp(this.configuration).signinUsingPOST(signInRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary signup
     * @param {SignUpRequest} signUpRequest signUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signupUsingPOST(signUpRequest: SignUpRequest, options?: any) {
        return AuthControllerApiFp(this.configuration).signupUsingPOST(signUpRequest, options)(this.axios, this.basePath);
    }

}


/**
 * MessageControllerApi - axios parameter creator
 * @export
 */
export const MessageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getMessagesByRoomId
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesByRoomIdUsingGET(roomId: string, options: any = {}): RequestArgs {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling getMessagesByRoomIdUsingGET.');
            }
            const localVarPath = `/api/message`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['roomId'] = roomId;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary postMessage
         * @param {NewMessageTO} newMessageTO newMessageTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageUsingPOST(newMessageTO: NewMessageTO, options: any = {}): RequestArgs {
            // verify required parameter 'newMessageTO' is not null or undefined
            if (newMessageTO === null || newMessageTO === undefined) {
                throw new RequiredError('newMessageTO','Required parameter newMessageTO was null or undefined when calling postMessageUsingPOST.');
            }
            const localVarPath = `/api/message`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"NewMessageTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newMessageTO !== undefined ? newMessageTO : {}) : (newMessageTO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageControllerApi - functional programming interface
 * @export
 */
export const MessageControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getMessagesByRoomId
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesByRoomIdUsingGET(roomId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageTO>> {
            const localVarAxiosArgs = MessageControllerApiAxiosParamCreator(configuration).getMessagesByRoomIdUsingGET(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary postMessage
         * @param {NewMessageTO} newMessageTO newMessageTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageUsingPOST(newMessageTO: NewMessageTO, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTO> {
            const localVarAxiosArgs = MessageControllerApiAxiosParamCreator(configuration).postMessageUsingPOST(newMessageTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MessageControllerApi - factory interface
 * @export
 */
export const MessageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getMessagesByRoomId
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagesByRoomIdUsingGET(roomId: string, options?: any) {
            return MessageControllerApiFp(configuration).getMessagesByRoomIdUsingGET(roomId, options)(axios, basePath);
        },
        /**
         * 
         * @summary postMessage
         * @param {NewMessageTO} newMessageTO newMessageTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMessageUsingPOST(newMessageTO: NewMessageTO, options?: any) {
            return MessageControllerApiFp(configuration).postMessageUsingPOST(newMessageTO, options)(axios, basePath);
        },
    };
};

/**
 * MessageControllerApi - object-oriented interface
 * @export
 * @class MessageControllerApi
 * @extends {BaseAPI}
 */
export class MessageControllerApi extends BaseAPI {
    /**
     * 
     * @summary getMessagesByRoomId
     * @param {string} roomId roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public getMessagesByRoomIdUsingGET(roomId: string, options?: any) {
        return MessageControllerApiFp(this.configuration).getMessagesByRoomIdUsingGET(roomId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary postMessage
     * @param {NewMessageTO} newMessageTO newMessageTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageControllerApi
     */
    public postMessageUsingPOST(newMessageTO: NewMessageTO, options?: any) {
        return MessageControllerApiFp(this.configuration).postMessageUsingPOST(newMessageTO, options)(this.axios, this.basePath);
    }

}


/**
 * RoomControllerApi - axios parameter creator
 * @export
 */
export const RoomControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getRoom
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomUsingGET(roomId: string, options: any = {}): RequestArgs {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling getRoomUsingGET.');
            }
            const localVarPath = `/api/room`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['roomId'] = roomId;
            }


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary postRoom
         * @param {NewRoomTO} newRoomTO newRoomTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoomUsingPOST(newRoomTO: NewRoomTO, options: any = {}): RequestArgs {
            // verify required parameter 'newRoomTO' is not null or undefined
            if (newRoomTO === null || newRoomTO === undefined) {
                throw new RequiredError('newRoomTO','Required parameter newRoomTO was null or undefined when calling postRoomUsingPOST.');
            }
            const localVarPath = `/api/room`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"NewRoomTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newRoomTO !== undefined ? newRoomTO : {}) : (newRoomTO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomControllerApi - functional programming interface
 * @export
 */
export const RoomControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getRoom
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomUsingGET(roomId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomTO> {
            const localVarAxiosArgs = RoomControllerApiAxiosParamCreator(configuration).getRoomUsingGET(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary postRoom
         * @param {NewRoomTO} newRoomTO newRoomTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoomUsingPOST(newRoomTO: NewRoomTO, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomTO> {
            const localVarAxiosArgs = RoomControllerApiAxiosParamCreator(configuration).postRoomUsingPOST(newRoomTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RoomControllerApi - factory interface
 * @export
 */
export const RoomControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getRoom
         * @param {string} roomId roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomUsingGET(roomId: string, options?: any) {
            return RoomControllerApiFp(configuration).getRoomUsingGET(roomId, options)(axios, basePath);
        },
        /**
         * 
         * @summary postRoom
         * @param {NewRoomTO} newRoomTO newRoomTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRoomUsingPOST(newRoomTO: NewRoomTO, options?: any) {
            return RoomControllerApiFp(configuration).postRoomUsingPOST(newRoomTO, options)(axios, basePath);
        },
    };
};

/**
 * RoomControllerApi - object-oriented interface
 * @export
 * @class RoomControllerApi
 * @extends {BaseAPI}
 */
export class RoomControllerApi extends BaseAPI {
    /**
     * 
     * @summary getRoom
     * @param {string} roomId roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public getRoomUsingGET(roomId: string, options?: any) {
        return RoomControllerApiFp(this.configuration).getRoomUsingGET(roomId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary postRoom
     * @param {NewRoomTO} newRoomTO newRoomTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomControllerApi
     */
    public postRoomUsingPOST(newRoomTO: NewRoomTO, options?: any) {
        return RoomControllerApiFp(this.configuration).postRoomUsingPOST(newRoomTO, options)(this.axios, this.basePath);
    }

}


